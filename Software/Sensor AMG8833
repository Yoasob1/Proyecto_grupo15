// ESP8266_AMG8833_SSD1283A
// 
// the AMG8833 sensor produces thermal images consisting of 8*8 'temperature blocks'
// AMG8833 breakout  -- standard I2C address 0x69
//
// sketch adapted after an example from the Adafruit AMG88xx library
//
// pin connectivity:
// AMG8833 ----------  ESP8266
//  VCC                 3V3
//  GND                 GND
//  SCL                 D1 (yellow wire color)
//  SDA                 D2 (green wire color)
//  INT                 not connected
//  AD0                 not connected - if to GND address change to 0x68
//
// uses Adafruit_AMG88xx.h - written by Dean Miller for Adafruit Industries.
// this library designed specifically to work with the Adafruit AMG88 breakout
// ----> http://www.adafruit.com/products/3538
// Adafruit invests time and resources providing this open source code,
// please support Adafruit and open-source hardware by purchasing products
// from Adafruit
//
// purpose of sketch: displays 8x8 pixel thermal sensor data on display
// microcontroller board is a ESP8266 (here Wemos D1 mini)
// display is a 1.5 inch 130*130 pixel TFT SD1283A controller
//
//
// Floris Wouterlood
// public domain
// May 2, 2022 
//
// AMG8833 thermal sensor related   
   #include <Adafruit_AMG88xx.h>
   Adafruit_AMG88xx amg;

// ST1283A library   
   #include <LCDWIKI_GUI.h>                                                             // core graphics library SD1283A
   #include <LCDWIKI_SPI.h>                                                             // hardware-specific library SD1283A

// display SPI pins for ESP8266 Wemos D1 mini
   #define MODEL SSD1283A
   #define CS   D8 
   #define CD   D3                                                                      // marked A0 on the SSD1283A breakout
   #define RST  D4 
   #define LED  -1 

   LCDWIKI_SPI mylcd(MODEL,CS,CD,RST,LED);                                              // constructor

   #define BLACK   0x0000   
   #define MINTEMP 22                                                                   // low range of the sensor (this will be blue on the screen)
   #define MAXTEMP 34 

   float pixels [AMG88xx_PIXEL_ARRAY_SIZE];

   #define MINTEMP 22                                                                   // low range of the sensor  (this will be blue on the screen)
   #define MAXTEMP 34                                                                   // high range of the sensor (this will be red on the screen)

   const uint16_t camColors[] = {
   0x480F, 0x400F, 0x400F, 0x400F, 0x4010, 0x3810, 0x3810, 0x3810, 0x3810, 0x3010,      // color lookup table: 0x400F = dark blue; F800  = bright red                                                                     // color lookup table
   0x3010, 0x3010, 0x2810, 0x2810, 0x2810, 0x2810, 0x2010, 0x2010, 0x2010, 0x1810,
   0x1810, 0x1811, 0x1811, 0x1011, 0x1011, 0x1011, 0x0811, 0x0811, 0x0811, 0x0011,
   0x0011, 0x0011, 0x0011, 0x0011, 0x0031, 0x0031, 0x0051, 0x0072, 0x0072, 0x0092,
   0x00B2, 0x00B2, 0x00D2, 0x00F2, 0x00F2, 0x0112, 0x0132, 0x0152, 0x0152, 0x0172,
   0x0192, 0x0192, 0x01B2, 0x01D2, 0x01F3, 0x01F3, 0x0213, 0x0233, 0x0253, 0x0253,
   0x0273, 0x0293, 0x02B3, 0x02D3, 0x02D3, 0x02F3, 0x0313, 0x0333, 0x0333, 0x0353,
   0x0373, 0x0394, 0x03B4, 0x03D4, 0x03D4, 0x03F4, 0x0414, 0x0434, 0x0454, 0x0474,
   0x0474, 0x0494, 0x04B4, 0x04D4, 0x04F4, 0x0514, 0x0534, 0x0534, 0x0554, 0x0554,
   0x0574, 0x0574, 0x0573, 0x0573, 0x0573, 0x0572, 0x0572, 0x0572, 0x0571, 0x0591,
   0x0591, 0x0590, 0x0590, 0x058F, 0x058F, 0x058F, 0x058E, 0x05AE, 0x05AE, 0x05AD,
   0x05AD, 0x05AD, 0x05AC, 0x05AC, 0x05AB, 0x05CB, 0x05CB, 0x05CA, 0x05CA, 0x05CA,
   0x05C9, 0x05C9, 0x05C8, 0x05E8, 0x05E8, 0x05E7, 0x05E7, 0x05E6, 0x05E6, 0x05E6,
   0x05E5, 0x05E5, 0x0604, 0x0604, 0x0604, 0x0603, 0x0603, 0x0602, 0x0602, 0x0601,
   0x0621, 0x0621, 0x0620, 0x0620, 0x0620, 0x0620, 0x0E20, 0x0E20, 0x0E40, 0x1640,
   0x1640, 0x1E40, 0x1E40, 0x2640, 0x2640, 0x2E40, 0x2E60, 0x3660, 0x3660, 0x3E60,
   0x3E60, 0x3E60, 0x4660, 0x4660, 0x4E60, 0x4E80, 0x5680, 0x5680, 0x5E80, 0x5E80,
   0x6680, 0x6680, 0x6E80, 0x6EA0, 0x76A0, 0x76A0, 0x7EA0, 0x7EA0, 0x86A0, 0x86A0,
   0x8EA0, 0x8EC0, 0x96C0, 0x96C0, 0x9EC0, 0x9EC0, 0xA6C0, 0xAEC0, 0xAEC0, 0xB6E0,
   0xB6E0, 0xBEE0, 0xBEE0, 0xC6E0, 0xC6E0, 0xCEE0, 0xCEE0, 0xD6E0, 0xD700, 0xDF00,
   0xDEE0, 0xDEC0, 0xDEA0, 0xDE80, 0xDE80, 0xE660, 0xE640, 0xE620, 0xE600, 0xE5E0,
   0xE5C0, 0xE5A0, 0xE580, 0xE560, 0xE540, 0xE520, 0xE500, 0xE4E0, 0xE4C0, 0xE4A0,
   0xE480, 0xE460, 0xEC40, 0xEC20, 0xEC00, 0xEBE0, 0xEBC0, 0xEBA0, 0xEB80, 0xEB60,
   0xEB40, 0xEB20, 0xEB00, 0xEAE0, 0xEAC0, 0xEAA0, 0xEA80, 0xEA60, 0xEA40, 0xF220,
   0xF200, 0xF1E0, 0xF1C0, 0xF1A0, 0xF180, 0xF160, 0xF140, 0xF100, 0xF0E0, 0xF0C0,
   0xF0A0, 0xF080, 0xF060, 0xF040, 0xF020, 0xF800,
   };

   int displayPixelHeight = 16;                                                         // determines size of on screen blocks 
   int displayPixelWidth = 16;

void setup() {

   mylcd.Init_LCD ();
   mylcd.Fill_Screen (BLACK);
  
   Serial.begin (9600);
   Serial.println ();
   Serial.println (); 
   Serial.println (F("AMG88xx pixels"));

   bool status;
   status = amg.begin ();                                                                // default settings
   if (!status) 
      {
       Serial.println("Could not find a valid AMG88xx sensor, check wiring!");
       while (1);
       }
    
   Serial.println ("-- Pixels Test --");
   Serial.println ();
   delay (100);                                                                         // let sensor boot up
}



void loop() { 
    
   amg.readPixels(pixels);                                                              // read all the pixels

   Serial.print("[");
   for(int i=1; i<=AMG88xx_PIXEL_ARRAY_SIZE; i++)
     {
      Serial.print (pixels[i-1]);
      Serial.print (", ");
      if ( i%8 == 0 ) Serial.println();
      }
   Serial.println ("]");
   Serial.println ();
   Serial.println ();
   Serial.println ("color blocks");  
   
   for (int i=0; i<AMG88xx_PIXEL_ARRAY_SIZE; i++)
      {
       uint8_t colorIndex = map(pixels[i], MINTEMP, MAXTEMP, 255, 0);                   // compare with color array
       colorIndex = constrain(colorIndex, 0, 255);

       mylcd.Fill_Rect(displayPixelHeight * floor(i / 8), displayPixelWidth * (i % 8),  // display on screen
       displayPixelHeight, displayPixelWidth, camColors[colorIndex]);

       Serial.print ("0x");
       Serial.println (camColors[colorIndex], HEX);    
       }

       Serial.println (); 
       
    delay(3000);                                                                        // add some delay  
}
